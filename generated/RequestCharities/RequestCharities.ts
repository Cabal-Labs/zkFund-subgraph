// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApproveVote extends ethereum.Event {
  get params(): ApproveVote__Params {
    return new ApproveVote__Params(this);
  }
}

export class ApproveVote__Params {
  _event: ApproveVote;

  constructor(event: ApproveVote) {
    this._event = event;
  }

  get validator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get charityId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CharityApproved extends ethereum.Event {
  get params(): CharityApproved__Params {
    return new CharityApproved__Params(this);
  }
}

export class CharityApproved__Params {
  _event: CharityApproved;

  constructor(event: CharityApproved) {
    this._event = event;
  }

  get charityId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get charityAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get status(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class CharityCreated extends ethereum.Event {
  get params(): CharityCreated__Params {
    return new CharityCreated__Params(this);
  }
}

export class CharityCreated__Params {
  _event: CharityCreated;

  constructor(event: CharityCreated) {
    this._event = event;
  }

  get charityAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get charityId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get info(): string {
    return this._event.parameters[3].value.toString();
  }

  get status(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class CharityDisapproved extends ethereum.Event {
  get params(): CharityDisapproved__Params {
    return new CharityDisapproved__Params(this);
  }
}

export class CharityDisapproved__Params {
  _event: CharityDisapproved;

  constructor(event: CharityDisapproved) {
    this._event = event;
  }

  get charityAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get charityId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get status(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class DisapproveVote extends ethereum.Event {
  get params(): DisapproveVote__Params {
    return new DisapproveVote__Params(this);
  }
}

export class DisapproveVote__Params {
  _event: DisapproveVote;

  constructor(event: DisapproveVote) {
    this._event = event;
  }

  get validator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get charityId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RequestCharities__charitiesResult {
  value0: string;
  value1: BigInt;
  value2: Address;
  value3: string;
  value4: boolean;
  value5: i32;

  constructor(
    value0: string,
    value1: BigInt,
    value2: Address,
    value3: string,
    value4: boolean,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getCharityId(): BigInt {
    return this.value1;
  }

  getWalletAddress(): Address {
    return this.value2;
  }

  getInfo(): string {
    return this.value3;
  }

  getOwnsWallet(): boolean {
    return this.value4;
  }

  getStatus(): i32 {
    return this.value5;
  }
}

export class RequestCharities__getVotesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class RequestCharities extends ethereum.SmartContract {
  static bind(address: Address): RequestCharities {
    return new RequestCharities("RequestCharities", address);
  }

  charities(param0: BigInt): RequestCharities__charitiesResult {
    let result = super.call(
      "charities",
      "charities(uint256):(string,uint256,address,string,bool,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new RequestCharities__charitiesResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toString(),
      result[4].toBoolean(),
      result[5].toI32()
    );
  }

  try_charities(
    param0: BigInt
  ): ethereum.CallResult<RequestCharities__charitiesResult> {
    let result = super.tryCall(
      "charities",
      "charities(uint256):(string,uint256,address,string,bool,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RequestCharities__charitiesResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toString(),
        value[4].toBoolean(),
        value[5].toI32()
      )
    );
  }

  charityRegistry(): Address {
    let result = super.call(
      "charityRegistry",
      "charityRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_charityRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "charityRegistry",
      "charityRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCharityStatus(charityId: BigInt): i32 {
    let result = super.call(
      "getCharityStatus",
      "getCharityStatus(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(charityId)]
    );

    return result[0].toI32();
  }

  try_getCharityStatus(charityId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCharityStatus",
      "getCharityStatus(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(charityId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getValidatorCount(): BigInt {
    let result = super.call(
      "getValidatorCount",
      "getValidatorCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getValidatorCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getValidatorCount",
      "getValidatorCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotes(charityId: BigInt): RequestCharities__getVotesResult {
    let result = super.call("getVotes", "getVotes(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(charityId)
    ]);

    return new RequestCharities__getVotesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getVotes(
    charityId: BigInt
  ): ethereum.CallResult<RequestCharities__getVotesResult> {
    let result = super.tryCall(
      "getVotes",
      "getVotes(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(charityId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RequestCharities__getVotesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validatorToCharity(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "validatorToCharity",
      "validatorToCharity(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_validatorToCharity(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validatorToCharity",
      "validatorToCharity(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validators(param0: Address): boolean {
    let result = super.call("validators", "validators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_validators(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("validators", "validators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokenToWhitelistCall extends ethereum.Call {
  get inputs(): AddTokenToWhitelistCall__Inputs {
    return new AddTokenToWhitelistCall__Inputs(this);
  }

  get outputs(): AddTokenToWhitelistCall__Outputs {
    return new AddTokenToWhitelistCall__Outputs(this);
  }
}

export class AddTokenToWhitelistCall__Inputs {
  _call: AddTokenToWhitelistCall;

  constructor(call: AddTokenToWhitelistCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTokenToWhitelistCall__Outputs {
  _call: AddTokenToWhitelistCall;

  constructor(call: AddTokenToWhitelistCall) {
    this._call = call;
  }
}

export class AddValidatorCall extends ethereum.Call {
  get inputs(): AddValidatorCall__Inputs {
    return new AddValidatorCall__Inputs(this);
  }

  get outputs(): AddValidatorCall__Outputs {
    return new AddValidatorCall__Outputs(this);
  }
}

export class AddValidatorCall__Inputs {
  _call: AddValidatorCall;

  constructor(call: AddValidatorCall) {
    this._call = call;
  }

  get newValidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddValidatorCall__Outputs {
  _call: AddValidatorCall;

  constructor(call: AddValidatorCall) {
    this._call = call;
  }
}

export class InitCharityCall extends ethereum.Call {
  get inputs(): InitCharityCall__Inputs {
    return new InitCharityCall__Inputs(this);
  }

  get outputs(): InitCharityCall__Outputs {
    return new InitCharityCall__Outputs(this);
  }
}

export class InitCharityCall__Inputs {
  _call: InitCharityCall;

  constructor(call: InitCharityCall) {
    this._call = call;
  }

  get walletAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get ownsWallet(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _info(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class InitCharityCall__Outputs {
  _call: InitCharityCall;

  constructor(call: InitCharityCall) {
    this._call = call;
  }
}

export class RemoveValidatorCall extends ethereum.Call {
  get inputs(): RemoveValidatorCall__Inputs {
    return new RemoveValidatorCall__Inputs(this);
  }

  get outputs(): RemoveValidatorCall__Outputs {
    return new RemoveValidatorCall__Outputs(this);
  }
}

export class RemoveValidatorCall__Inputs {
  _call: RemoveValidatorCall;

  constructor(call: RemoveValidatorCall) {
    this._call = call;
  }

  get removingValidator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveValidatorCall__Outputs {
  _call: RemoveValidatorCall;

  constructor(call: RemoveValidatorCall) {
    this._call = call;
  }
}

export class ResolveCharityCall extends ethereum.Call {
  get inputs(): ResolveCharityCall__Inputs {
    return new ResolveCharityCall__Inputs(this);
  }

  get outputs(): ResolveCharityCall__Outputs {
    return new ResolveCharityCall__Outputs(this);
  }
}

export class ResolveCharityCall__Inputs {
  _call: ResolveCharityCall;

  constructor(call: ResolveCharityCall) {
    this._call = call;
  }

  get charityId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResolveCharityCall__Outputs {
  _call: ResolveCharityCall;

  constructor(call: ResolveCharityCall) {
    this._call = call;
  }
}

export class SetCharityRegistryCall extends ethereum.Call {
  get inputs(): SetCharityRegistryCall__Inputs {
    return new SetCharityRegistryCall__Inputs(this);
  }

  get outputs(): SetCharityRegistryCall__Outputs {
    return new SetCharityRegistryCall__Outputs(this);
  }
}

export class SetCharityRegistryCall__Inputs {
  _call: SetCharityRegistryCall;

  constructor(call: SetCharityRegistryCall) {
    this._call = call;
  }

  get _charityRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCharityRegistryCall__Outputs {
  _call: SetCharityRegistryCall;

  constructor(call: SetCharityRegistryCall) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get charityId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get votedApprove(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}
